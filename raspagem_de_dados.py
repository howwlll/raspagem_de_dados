# -*- coding: utf-8 -*-
"""Raspagem_de_dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qQQWgkQyLAdEYy4EDZQDtcz_KshLEnQ_
"""

!pip install transformers
!pip install vaderSentiment
!pip install googletrans==4.0.0-rc1
!pip install transformers torch
!pip install tweepy pandas

import tweepy
import pandas as pd

bearer_token = "AAAAAAAAAAAAAAAAAAAAANZE3wEAAAAA3%2FWCTbEyWOKOiaCU1FaVWw6VzIs%3D9GOXZCwJjy1zZFIUKvBMsl0fwzFv2qEowIweaitCVMeXn8rqPp"
client = tweepy.Client(bearer_token=bearer_token)

tweets = client.search_recent_tweets(query="#politica lang:pt", max_results=50)
dados = pd.DataFrame([tweet.text for tweet in tweets.data], columns=["texto"])
dados.to_csv("tweets.csv", index=False)

print(dados.head())

#Como o VADER originalmente é em inglês, vou estar traduzindo ele.

from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from googletrans import Translator

analyzer = SentimentIntensityAnalyzer()
translator = Translator()

# traduz tweets pro inglês
dados["texto_en"] = dados["texto"].apply(lambda x: translator.translate(x, src="pt", dest="en").text)

# aplicar VADER
dados["vader_en"] = dados["texto_en"].apply(lambda x: analyzer.polarity_scores(x)["compound"])

def classificar_vader(score):
    if score > 0.05:
        return f"positivo ({score:.2f})"
    elif score < -0.05:
        return f"negativo ({score:.2f})"
    else:
        return f"neutro ({score:.2f})"

dados["vader_en_label"] = dados["vader_en"].apply(classificar_vader)

def vader_pt_label(text):
    score = analyzer.polarity_scores(text)["compound"]
    if score >= 0.05:
        return f"Positivo ({score:.2f})"
    elif score <= -0.05:
        return f"Negativo ({score:.2f})"
    else:
        return f"Neutro ({score:.2f})"

dados["vader_pt"] = dados["texto"].apply(vader_pt_label)

from transformers import pipeline

# carregar modelo BERTimbau (exemplo usando modelo multilíngue de sentimento)
classifier = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

# aplicar análise de sentimentos
dados["bertimbau"] = dados["texto"].apply(lambda x: classifier(x[:512])[0]['label'])

def bertimbau_label_score(text):
    star_label = classifier(text[:512])[0]['label']  # "1 star" a "5 stars"
    star = int(star_label.split()[0])
    score = (star - 1) / 4  # 1 star -> 0.0, 5 stars -> 1.0

    if star <= 2:
        sentiment = "Negativo"
    elif star == 3:
        sentiment = "Neutro"
    else:
        sentiment = "Positivo"

    return f"{sentiment} ({score:.2f})"

# Aplicar no DataFrame
dados["bertimbau"] = dados["texto"].apply(bertimbau_label_score)

# Verificar resultado
print(dados[["texto", "bertimbau"]])

#tabela resumida
resumo = dados[["texto", "vader_pt", "vader_en_label", "bertimbau"]]
resumo.head(20)

comparativo = dados[["texto", "vader_pt", "vader_en", "bertimbau"]]

import matplotlib.pyplot as plt

# Função para extrair apenas o score numérico do formato "Positivo (0.80)"
def extract_score(text):
    if isinstance(text, str):  # se for string do tipo "Positivo (0.80)"
        return float(text.split("(")[1].replace(")", ""))
    else:  # se já for float
        return float(text)


# Criar colunas com scores float
comparativo["vader_pt_score"] = comparativo["vader_pt"].apply(extract_score)
comparativo["vader_en_score"] = comparativo["vader_en"].apply(extract_score)
comparativo["bertimbau_score"] = comparativo["bertimbau"].apply(extract_score)

# -----------------------------
# Gráfico 1: barras com score médio
# -----------------------------
scores_mean = [
    comparativo["vader_pt_score"].mean(),
    comparativo["vader_en_score"].mean(),
    comparativo["bertimbau_score"].mean()
]

metodos = ["VADER PT", "VADER EN", "BERTimbau PT"]

plt.figure(figsize=(8,5))
plt.bar(metodos, scores_mean, color=["skyblue", "lightgreen", "salmon"])
plt.ylabel("Score médio")
plt.title("Score médio de sentimento por método")
plt.ylim(0,1)
plt.show()

# -----------------------------
# Gráfico 2: histogramas comparativos
# -----------------------------
plt.figure(figsize=(10,5))
plt.hist(comparativo["vader_pt_score"], bins=10, alpha=0.5, label="VADER PT")
plt.hist(comparativo["vader_en_score"], bins=10, alpha=0.5, label="VADER EN")
plt.hist(comparativo["bertimbau_score"], bins=10, alpha=0.5, label="BERTimbau PT")
plt.xlabel("Score")
plt.ylabel("Número de tweets")
plt.title("Distribuição de scores de sentimento")
plt.legend()
plt.show()


comparativo.loc[:, "vader_pt_score"] = comparativo["vader_pt"].apply(extract_score)
comparativo.loc[:, "vader_en_score"] = comparativo["vader_en"].apply(extract_score)
comparativo.loc[:, "bertimbau_score"] = comparativo["bertimbau"].apply(extract_score)